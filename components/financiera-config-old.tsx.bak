
'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Building2, 
  Copy, 
  Trash2, 
  Plus, 
  Save, 
  AlertTriangle,
  Settings,
  DollarSign,
  Percent,
  Car,
  Target
} from 'lucide-react';
import toast from 'react-hot-toast';

interface PlanFinanciera {
  id: string;
  nombre: string;
  linea?: string;
  version?: string;
  participacion_financiera: number;
  comision_apertura: number;
  pago_distribuidor: number;
  enganche_minimo: number;
  enganche_maximo: number;
  es_generico: boolean;
}

interface Excepcion {
  id: string;
  linea: string;
  version?: string;
  plan_alternativo_id: string;
}

interface ConfigFinanciera {
  nombre: string;
  planes: PlanFinanciera[];
  excepciones: Excepcion[];
}

interface FinancieraConfigProps {
  financieras: string[];
  vehicleLines: string[];
  vehicleVersions: Record<string, string[]>;
  onSave: (config: Record<string, ConfigFinanciera>) => void;
}

export function FinancieraConfig({
  financieras,
  vehicleLines,
  vehicleVersions,
  onSave
}: FinancieraConfigProps) {
  const [configuraciones, setConfiguraciones] = useState<Record<string, ConfigFinanciera>>({});
  const [financieraActiva, setFinancieraActiva] = useState<string>(financieras[0] || '');
  const [hasChanges, setHasChanges] = useState(false);

  // Inicializar configuraciones con valores precargados
  useEffect(() => {
    const configsIniciales: Record<string, ConfigFinanciera> = {};
    
    financieras.forEach(financiera => {
      // Valores precargados basados en análisis de boletines
      const valoresPrecargados = getPrecargaFinanciera(financiera);
      
      configsIniciales[financiera] = {
        nombre: financiera,
        planes: [{
          id: `${financiera}-plan-generico`,
          nombre: `Plan Base ${financiera}`,
          participacion_financiera: valoresPrecargados.participacion_financiera,
          comision_apertura: valoresPrecargados.comision_apertura,
          pago_distribuidor: valoresPrecargados.pago_distribuidor,
          enganche_minimo: valoresPrecargados.enganche_minimo,
          enganche_maximo: valoresPrecargados.enganche_maximo,
          bono_subsidio: valoresPrecargados.bono_subsidio,
          es_generico: true
        }],
        excepciones: []
      };
    });

    setConfiguraciones(configsIniciales);
  }, [financieras]);

  // Valores precargados por financiera basados en análisis
  const getPrecargaFinanciera = (financiera: string) => {
    const precargas: Record<string, any> = {
      'BBVA': {
        participacion_financiera: 70,
        comision_apertura: 2.5,
        pago_distribuidor: 16.5,
        enganche_minimo: 20,
        enganche_maximo: 50,
        bono_subsidio: 24300 // Promedio de bonos BBVA del análisis
      },
      'Banorte': {
        participacion_financiera: 75,
        comision_apertura: 5.0,
        pago_distribuidor: 5.0,
        enganche_minimo: 10,
        enganche_maximo: 60,
        bono_subsidio: 15000 // Subsidios variables según análisis
      },
      'Santander': {
        participacion_financiera: 65,
        comision_apertura: 2.69,
        pago_distribuidor: 2.69,
        enganche_minimo: 15,
        enganche_maximo: 55,
        bono_subsidio: 12000 // Incentivos promedio Santander
      }
    };

    return precargas[financiera] || {
      participacion_financiera: 70,
      comision_apertura: 3.0,
      pago_distribuidor: 4.0,
      enganche_minimo: 20,
      enganche_maximo: 60,
      bono_subsidio: 10000
    };
  };

  // Duplicar plan existente
  const duplicarPlan = (financiera: string, planId: string) => {
    const config = configuraciones[financiera];
    const planOriginal = config.planes.find(p => p.id === planId);
    
    if (!planOriginal) return;

    const nuevoPlan: PlanFinanciera = {
      ...planOriginal,
      id: `${financiera}-plan-${Date.now()}`,
      nombre: `${planOriginal.nombre} (Copia)`,
      linea: undefined,
      version: undefined,
      es_generico: false
    };

    setConfiguraciones(prev => ({
      ...prev,
      [financiera]: {
        ...prev[financiera],
        planes: [...prev[financiera].planes, nuevoPlan]
      }
    }));

    setHasChanges(true);
    toast.success(`Plan duplicado: ${nuevoPlan.nombre}`);
  };

  // Eliminar plan
  const eliminarPlan = (financiera: string, planId: string) => {
    const config = configuraciones[financiera];
    const plan = config.planes.find(p => p.id === planId);
    
    if (plan?.es_generico) {
      toast.error('No se puede eliminar el plan base');
      return;
    }

    setConfiguraciones(prev => ({
      ...prev,
      [financiera]: {
        ...prev[financiera],
        planes: prev[financiera].planes.filter(p => p.id !== planId)
      }
    }));

    setHasChanges(true);
    toast.success('Plan eliminado');
  };

  // Actualizar plan
  const actualizarPlan = (financiera: string, planId: string, campo: string, valor: any) => {
    setConfiguraciones(prev => ({
      ...prev,
      [financiera]: {
        ...prev[financiera],
        planes: prev[financiera].planes.map(plan => 
          plan.id === planId 
            ? { ...plan, [campo]: valor }
            : plan
        )
      }
    }));

    setHasChanges(true);
  };

  // Agregar excepción
  const agregarExcepcion = (financiera: string) => {
    const nuevaExcepcion: Excepcion = {
      id: `${financiera}-exc-${Date.now()}`,
      linea: '',
      plan_alternativo_id: ''
    };

    setConfiguraciones(prev => ({
      ...prev,
      [financiera]: {
        ...prev[financiera],
        excepciones: [...prev[financiera].excepciones, nuevaExcepcion]
      }
    }));

    setHasChanges(true);
  };

  // Actualizar excepción
  const actualizarExcepcion = (financiera: string, excepcionId: string, campo: string, valor: string | undefined) => {
    setConfiguraciones(prev => ({
      ...prev,
      [financiera]: {
        ...prev[financiera],
        excepciones: prev[financiera].excepciones.map(exc => 
          exc.id === excepcionId 
            ? { ...exc, [campo]: valor }
            : exc
        )
      }
    }));
    setHasChanges(true);
  };

  // Eliminar excepción
  const eliminarExcepcion = (financiera: string, excepcionId: string) => {
    setConfiguraciones(prev => ({
      ...prev,
      [financiera]: {
        ...prev[financiera],
        excepciones: prev[financiera].excepciones.filter(exc => exc.id !== excepcionId)
      }
    }));
    setHasChanges(true);
  };

  // Guardar configuración
  const guardarConfiguracion = async () => {
    try {
      await onSave(configuraciones);
      setHasChanges(false);
      toast.success('Configuración de financieras guardada exitosamente');
    } catch (error) {
      toast.error('Error al guardar configuración');
    }
  };

  const configActual = configuraciones[financieraActiva];
  if (!configActual) return null;

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <Building2 className="h-6 w-6 text-blue-600" />
          <div>
            <h2 className="text-2xl font-bold">Configuración de Financieras</h2>
            <p className="text-gray-600">Gestiona planes y parámetros por financiera</p>
          </div>
        </div>
        
        <Button 
          onClick={guardarConfiguracion}
          disabled={!hasChanges}
          className="bg-green-600 hover:bg-green-700"
        >
          <Save className="h-4 w-4 mr-2" />
          Guardar Cambios
        </Button>
      </div>

      {/* Selector de Financiera */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            Seleccionar Financiera
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex gap-2">
            {financieras.map((financiera) => (
              <Button
                key={financiera}
                variant={financieraActiva === financiera ? "default" : "outline"}
                onClick={() => setFinancieraActiva(financiera)}
              >
                {financiera}
              </Button>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Planes de la Financiera */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <DollarSign className="h-5 w-5" />
                Planes - {financieraActiva}
              </CardTitle>
              <CardDescription>
                Plan base genérico y planes específicos por línea/versión
              </CardDescription>
            </div>
            
            <Button 
              onClick={() => duplicarPlan(financieraActiva, configActual.planes[0]?.id)}
              variant="outline"
            >
              <Plus className="h-4 w-4 mr-2" />
              Nuevo Plan
            </Button>
          </div>
        </CardHeader>
        <CardContent className="space-y-6">
          {configActual.planes.map((plan, index) => (
            <div key={plan.id} className="border rounded-lg p-4 space-y-4">
              {/* Header del Plan */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  {plan.es_generico && (
                    <Badge variant="secondary" className="bg-blue-100 text-blue-800">
                      Plan Base (Todas las líneas)
                    </Badge>
                  )}
                  {!plan.es_generico && (
                    <Badge variant="outline">
                      Plan Específico
                    </Badge>
                  )}
                  <Input
                    value={plan.nombre}
                    onChange={(e) => actualizarPlan(financieraActiva, plan.id, 'nombre', e.target.value)}
                    className="font-medium max-w-xs"
                  />
                </div>
                
                <div className="flex items-center gap-2">
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => duplicarPlan(financieraActiva, plan.id)}
                  >
                    <Copy className="h-4 w-4" />
                  </Button>
                  {!plan.es_generico && (
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => eliminarPlan(financieraActiva, plan.id)}
                    >
                      <Trash2 className="h-4 w-4 text-red-600" />
                    </Button>
                  )}
                </div>
              </div>

              {/* Aplicabilidad (solo para planes específicos) */}
              {!plan.es_generico && (
                <div className="grid grid-cols-2 gap-4 p-3 bg-gray-50 rounded-lg">
                  <div>
                    <Label>Línea de Vehículo</Label>
                    <Select 
                      value={plan.linea || "todas"}
                      onValueChange={(value) => actualizarPlan(financieraActiva, plan.id, 'linea', value === "todas" ? undefined : value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Todas las líneas" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="todas">Todas las líneas</SelectItem>
                        {vehicleLines.map((line) => (
                          <SelectItem key={line} value={line}>
                            {line}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <Label>Versión</Label>
                    <Select 
                      value={plan.version || "todas"}
                      onValueChange={(value) => actualizarPlan(financieraActiva, plan.id, 'version', value === "todas" ? undefined : value)}
                      disabled={!plan.linea}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Todas las versiones" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="todas">Todas las versiones</SelectItem>
                        {plan.linea && vehicleVersions[plan.linea]?.map((version) => (
                          <SelectItem key={version} value={version}>
                            {version}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              )}

              {/* Parámetros del Plan */}
              <div className="grid grid-cols-2 lg:grid-cols-6 gap-4">
                {/* Participación Financiera */}
                <div>
                  <Label className="flex items-center gap-1">
                    <Percent className="h-3 w-3" />
                    Participación Financiera
                  </Label>
                  <Input
                    type="number"
                    min="0"
                    max="100"
                    step="0.1"
                    value={plan.participacion_financiera}
                    onChange={(e) => actualizarPlan(financieraActiva, plan.id, 'participacion_financiera', parseFloat(e.target.value))}
                  />
                  <div className="text-xs text-gray-500 mt-1">
                    Distribuidor: {(100 - plan.participacion_financiera).toFixed(1)}%
                  </div>
                </div>

                {/* Comisión Apertura */}
                <div>
                  <Label className="flex items-center gap-1">
                    <DollarSign className="h-3 w-3" />
                    Comisión Apertura
                  </Label>
                  <Input
                    type="number"
                    min="0"
                    max="10"
                    step="0.01"
                    value={plan.comision_apertura}
                    onChange={(e) => actualizarPlan(financieraActiva, plan.id, 'comision_apertura', parseFloat(e.target.value))}
                  />
                  <div className="text-xs text-gray-500">% del saldo</div>
                </div>

                {/* Pago Distribuidor */}
                <div>
                  <Label className="flex items-center gap-1">
                    <Target className="h-3 w-3" />
                    Pago Distribuidor
                  </Label>
                  <Input
                    type="number"
                    min="0"
                    max="25"
                    step="0.01"
                    value={plan.pago_distribuidor}
                    onChange={(e) => actualizarPlan(financieraActiva, plan.id, 'pago_distribuidor', parseFloat(e.target.value))}
                  />
                  <div className="text-xs text-gray-500">% del saldo</div>
                </div>

                {/* Enganche Mínimo */}
                <div>
                  <Label>Enganche Mín.</Label>
                  <Input
                    type="number"
                    min="0"
                    max="99"
                    step="1"
                    value={plan.enganche_minimo}
                    onChange={(e) => actualizarPlan(financieraActiva, plan.id, 'enganche_minimo', parseFloat(e.target.value))}
                  />
                  <div className="text-xs text-gray-500">% mínimo</div>
                </div>

                {/* Enganche Máximo */}
                <div>
                  <Label>Enganche Máx.</Label>
                  <Input
                    type="number"
                    min="0"
                    max="99"
                    step="1"
                    value={plan.enganche_maximo}
                    onChange={(e) => actualizarPlan(financieraActiva, plan.id, 'enganche_maximo', parseFloat(e.target.value))}
                    placeholder="99 (blanco = 99%)"
                  />
                  <div className="text-xs text-gray-500">% máximo</div>
                </div>

                {/* Bono/Subsidio */}
                <div>
                  <Label className="flex items-center gap-1">
                    <DollarSign className="h-3 w-3" />
                    Bono/Subsidio
                  </Label>
                  <Input
                    type="number"
                    min="0"
                    step="100"
                    value={plan.bono_subsidio}
                    onChange={(e) => actualizarPlan(financieraActiva, plan.id, 'bono_subsidio', parseFloat(e.target.value) || 0)}
                    placeholder="15,000"
                  />
                  <div className="text-xs text-gray-500">
                    ${plan.bono_subsidio?.toLocaleString('es-MX') || '0'}
                  </div>
                </div>
              </div>

              {/* Vista previa de cálculo CORREGIDO */}
              <div className="bg-blue-50 p-3 rounded-lg border">
                <div className="text-sm font-medium text-blue-800 mb-2">Vista Previa (Vehículo $400,000) - Cálculo Real</div>
                {(() => {
                  const precioLista = 400000;
                  const bonoBruto = plan.bono_subsidio || 0;
                  const participacionDistribuidor = (100 - plan.participacion_financiera) / 100;
                  const costoBonoDistribuidor = bonoBruto * participacionDistribuidor;
                  const precioAjustado = precioLista - bonoBruto;
                  const enganches = precioLista * plan.enganche_minimo / 100;
                  const saldoFinanciar = precioAjustado - enganches;
                  const comisionApertura = saldoFinanciar * plan.comision_apertura / 100;
                  const pagoDistribuidor = saldoFinanciar * plan.pago_distribuidor / 100;
                  const utilidadReal = pagoDistribuidor - costoBonoDistribuidor;

                  return (
                    <div className="grid grid-cols-2 lg:grid-cols-6 gap-3 text-xs">
                      <div>
                        <span className="text-gray-600">Precio Lista:</span>
                        <div className="font-medium">${precioLista.toLocaleString()}</div>
                      </div>
                      <div>
                        <span className="text-gray-600">Bono Cliente:</span>
                        <div className="font-medium text-red-600">-${bonoBruto.toLocaleString()}</div>
                      </div>
                      <div>
                        <span className="text-gray-600">Costo Distribuidor:</span>
                        <div className="font-medium text-orange-600">${costoBonoDistribuidor.toLocaleString()}</div>
                      </div>
                      <div>
                        <span className="text-gray-600">Saldo a Financiar:</span>
                        <div className="font-medium">${saldoFinanciar.toLocaleString()}</div>
                      </div>
                      <div>
                        <span className="text-gray-600">Pago Distribuidor:</span>
                        <div className="font-medium text-blue-600">${pagoDistribuidor.toLocaleString()}</div>
                      </div>
                      <div>
                        <span className="text-gray-600">Utilidad REAL:</span>
                        <div className="font-medium text-green-600">${utilidadReal.toLocaleString()}</div>
                      </div>
                    </div>
                  );
                })()}
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      {/* Excepciones */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <AlertTriangle className="h-5 w-5" />
                Excepciones - {financieraActiva}
              </CardTitle>
              <CardDescription>
                Líneas/versiones que no usan el plan base ni los específicos
              </CardDescription>
            </div>
            
            <Button 
              onClick={() => agregarExcepcion(financieraActiva)}
              variant="outline"
              size="sm"
            >
              <Plus className="h-4 w-4 mr-2" />
              Nueva Excepción
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {configActual.excepciones.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <AlertTriangle className="h-12 w-12 mx-auto mb-4 text-gray-300" />
              <p>No hay excepciones configuradas</p>
              <p className="text-sm">Las excepciones permiten que ciertas líneas/versiones usen planes alternativos</p>
            </div>
          ) : (
            <div className="space-y-3">
              {configActual.excepciones.map((excepcion) => (
                <div key={excepcion.id} className="flex items-center gap-4 p-3 border rounded-lg">
                  <Select 
                    value={excepcion.linea || ""}
                    onValueChange={(value) => actualizarExcepcion(financieraActiva, excepcion.id, 'linea', value)}
                  >
                    <SelectTrigger className="w-32">
                      <SelectValue placeholder="Línea" />
                    </SelectTrigger>
                    <SelectContent>
                      {vehicleLines.map((line) => (
                        <SelectItem key={line} value={line}>
                          {line}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  
                  <Select 
                    value={excepcion.version || ""}
                    onValueChange={(value) => actualizarExcepcion(financieraActiva, excepcion.id, 'version', value === "" ? undefined : value)}
                  >
                    <SelectTrigger className="w-32">
                      <SelectValue placeholder="Versión" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="">Todas</SelectItem>
                      {excepcion.linea && vehicleVersions[excepcion.linea]?.map((version) => (
                        <SelectItem key={version} value={version}>
                          {version}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  
                  <Select 
                    value={excepcion.plan_alternativo_id || ""}
                    onValueChange={(value) => actualizarExcepcion(financieraActiva, excepcion.id, 'plan_alternativo_id', value)}
                  >
                    <SelectTrigger className="flex-1">
                      <SelectValue placeholder="Plan alternativo" />
                    </SelectTrigger>
                    <SelectContent>
                      {configActual.planes.map((plan) => (
                        <SelectItem key={plan.id} value={plan.id}>
                          {plan.nombre}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  
                  <Button 
                    size="sm" 
                    variant="outline"
                    onClick={() => eliminarExcepcion(financieraActiva, excepcion.id)}
                  >
                    <Trash2 className="h-4 w-4 text-red-600" />
                  </Button>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Alerta de cambios */}
      {hasChanges && (
        <Alert className="border-orange-200 bg-orange-50">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription className="text-orange-800">
            Tienes cambios sin guardar. No olvides hacer clic en "Guardar Cambios" para aplicar la configuración.
          </AlertDescription>
        </Alert>
      )}
    </div>
  );
}
